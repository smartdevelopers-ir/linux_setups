#! /bin/bash
USER_NAME=""
DATE=""
# This is period of updating mount. for example if you want set expire date for 3 mount later from passed date, set this to 3
PERIOD=1
print_help(){
	echo -e "-n\tusen name"
	echo -e "-d\tThe date option, next expire date will calculate from given date"
	echo -e "-p\tMount period. how many mount later do you want to set expire date?"
	echo -e "-h\tto show this help"
} 
log(){
	echo "$(date +'%b %d %T') [update_acc_expire] $1" >> /var/log/acc-expire.log
	echo "$1" 
}
#n is name of user
#d is date that must be claculated from it
#r is option for just recalculate expire date for next priod
while getopts ":n:d:p:rh" opt; do
	case $opt in
		n)
			USER_NAME="$OPTARG"
			;;
		d)
			DATE="$OPTARG"
			;;
		p)
			PERIOD="$OPTARG"
			;;
		h)
			print_help
			exit 1
			;;
		\?)
			echo "Invalid option -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done
if [[ $USER_NAME ]]
then
	# user exists
	if ! id -u $USER_NAME &>/dev/null; then
		echo "User $USER_NAME dose not exists"
		exit 1
	fi
	if [[ ! $DATE ]]
	then
		DATE="Today"
	fi 
	diffMinute=$(( ( $(date +%s) - $(date -d "$DATE 23:59:00 $(( 30 * $PERIOD )) days" +%s) ) / 60 ))
	if [[ $diffMinute -gt 0 ]]; then
		#43200 is 30 days to minute
		remaining_minute=$(( (43200 * $PERIOD) - ($diffMinute % (43200 * $PERIOD)) ))
		next_expire_date=$(date +%F -d "Today $remaining_minute minutes")
	else
		next_expire_date=$(date -d "$DATE 23:59:00 $((30 * $PERIOD)) days" +%F)
	fi
	if grep -w $USER_NAME /etc/acc-expire/users &>/dev/null; then
		sudo sed -i "s/.*$USER_NAME.*/$USER_NAME $next_expire_date/" /etc/acc-expire/users
	else
		echo "$USER_NAME $next_expire_date" >> /etc/acc-expire/users
	fi
	log "Next expire date for user $USER_NAME was set to $next_expire_date"
else
	echo "You must spesify user name"
fi


