#! /bin/bash
USER_NAME=""
DATE=""
# This is period of updating mount. for example if you want set expire date for 3 mount later from passed date, set this to 3
PERIOD=1
TRAFFIC_PER_MOUNT=30
print_help(){
	echo -e "-n\tusen name"
	echo -e "-d\tThe date option, next expire date will calculate from given date"
	echo -e "-p\tMount period. how many mount later do you want to set expire date?"
	echo -e "-h\tto show this help"
} 
log(){
	echo "$(date +'%b %d %T') [update_acc_expire] $1" >> /var/log/acc-expire.log
	echo "$1" 
}
#n is name of user
#d is date that must be claculated from it
#e is option for just extend expire date for next priod 
#p is priod count 
#tmp is traffic_per_month
while test $# -gt 0; do
           case "$1" in
                -n)
                    shift
                    USER_NAME=$1
                    shift
                    ;;
                -d)
                    shift
                    DATE=$1
                    shift
                    ;;
				-p)
                    shift
                    PERIOD=$1
                    shift
                    ;;
				-traffic_per_month)
                    shift
                    TRAFFIC_PER_MOUNT=$1
                    shift
                    ;;
				-h)
                    print_help
					exit 1
                    ;;
                *)
                   echo "Invalid option -$OPTARG" >&2
					exit 1
                   ;;
          esac
  done

#while getopts ":n:d:p:traffic_per_month:h" opt; do
#	case $opt in
#		n)
#			USER_NAME="$OPTARG"
#			;;
#		d)
#			DATE="$OPTARG"
#			;;
#		p)
#			PERIOD="$OPTARG"
#			;;
#		traffic_per_month)
#			TRAFFIC_PER_MOUNT="$OPTARG"
#			;;
#		h)
#			print_help
#			exit 1
#			;;
#		
#		\?)
#			echo "Invalid option -$OPTARG" >&2
#			exit 1
#			;;
#		:)
#			echo "Option -$OPTARG requires an argument." >&2
#			exit 1
#			;;
#	esac
#done
if [[ $USER_NAME ]]
then
	# user exists
	if ! id -u $USER_NAME &>/dev/null; then
		echo "User $USER_NAME dose not exists" >&2
		exit 1
	fi
	
	if [[ ! $DATE ]]
	then
		# first check if users is available or has expire date
		edate=$(awk -v USER_NAME=$USER_NAME '$1==USER_NAME {print $2}' /etc/acc-expire/users)
		# if user has expire date if expire date has been passed set DATE = today 
		# and active user by usermod 
		# if expire date has not been passed so set DATE to users expire date 
		if [[ $edate ]] 
		then
			diffSecond=$(( ( $(date +%s) - $(date -d "$edate 23:59:59" +%s) ) ))
			# if expire date is passed
			if [[ $diffSecond -gt 0 ]]; then
				sudo usermod -U $USER_NAME
				xrayUnlockCount=$(/usr/local/bin/xray-user-manager -unlock $USER_NAME)
				if [[ $xrayUnlockCount -gt 0 ]]; then
					systemctl restart xray
				fi
				echo "User $USER_NAME has been locked in $edate. Now its unlocked."
				DATE="Today"
			else
				DATE=$edate
			fi
		fi
	fi
	
	if [[ ! $DATE ]]
	then
		DATE="Today"
	fi 
	
	
	next_expire_date=$(date -d "$DATE 23:59:59 $((30 * $PERIOD)) days" +%F)
	
	if grep -w $USER_NAME /etc/acc-expire/users &>/dev/null; then
		sudo awk -v "UNAME=$USER_NAME" -v "DATE=$next_expire_date" -v "PERIOD=$PERIOD" -v "TPM=$TRAFFIC_PER_MOUNT" '$1==UNAME {$2=DATE ; if(NF > 2) {$3=TPM ; $4=$3 * PERIOD}} {print $0}' /etc/acc-expire/users > /tmp/tmp-users && mv /tmp/tmp-users /etc/acc-expire/users
		bash /usr/local/bin/smartws_add_plan $USER_NAME $next_expire_date $PERIOD $TRAFFIC_PER_MOUNT
	else
		echo "$USER_NAME $next_expire_date $TRAFFIC_PER_MOUNT $(( $TRAFFIC_PER_MOUNT*$PERIOD ))" >> /etc/acc-expire/users
		bash /usr/local/bin/smartws_add_plan $USER_NAME $next_expire_date $PERIOD $TRAFFIC_PER_MOUNT
	fi
	log "Next expire date for user $USER_NAME was set to $next_expire_date"
	
else
	echo "You must spesify user name"
fi

