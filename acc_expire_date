#!/bin/bash
USER_NAME=""
DATE=""
RE_CALC=0
print_help(){
	echo "-n\t\tusen name"
	echo "-d\t\tThe date option, next expire date will calculate from given date"
	echo "-r\t\tChange or update expire date to given date or today"
	echo "-h\t\tto show this help"
} 
#n is name of user
#d is date that must be claculated from it
#r is option for just recalculate expire date for next priod
while getopts ":n:d:rh" opt; do
	case $opt in
		n)
			USER_NAME="$OPTARG"
			;;
		d)
			DATE="$OPTARG"
			;;
		r)
			RE_CALC=1
			;;
		h)
			print_help
			exit 1
			;;
		\?)
			echo "Invalid option -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

if [[ $USER_NAME ]]
then
	
	if [[ ! $DATE ]]
	then
		DATE="Today"
	fi
	let expireDay=$((10#$(date +%d -d "$DATE +30 days")))
	let expireMount=$((10#$(date +%m -d "$DATE +30 days")))
	let expireYear=$((10#$(date +%Y -d "$DATE +30 days")))
	let currentDay=$((10#$(date +%d)))
	let currentMount=$((10#$(date +%m)))
	let currentYear=$((10#$(date +%Y)))
	if [[ RE_CALC -eq 0 ]]; then
		if [[ $(( $currentDay - $expireDay )) -eq 0 && $(( $currentMount - $expireMount )) -eq 0 && $(( $currentYear - $expireYear )) -eq 0 ]]; then
			usermod -L $USER_NAME
			expireMount=$((10#$(date +%m -d "Today +30 days")))
			expireDay=$((10#$(date +%d -d "Today +30 days")))
		fi
	else
		if [[ $(( $currentDay - $expireDay )) -eq 0 && $(( $currentMount - $expireMount )) -eq 0 && $(( $currentYear - $expireYear )) -eq 0 ]]; then
			echo "Calculating next expire date from Today"
			DATE="Today"
		fi
		
		expireMount=$((10#$(date +%m -d "$DATE +30 days")))
		expireDay=$((10#$(date +%d -d "$DATE +30 days")))
		
		
	fi
	
	((crontab -l | grep -v -w "$USER_NAME") ; echo "0 0 $expireDay $expireMount * bash /usr/local/bin/acc_expire_date -n $USER_NAME") | crontab -
else
	echo "You must spesify user name"
fi